// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InfoClient is the client API for Info service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InfoClient interface {
	CreateInfo(ctx context.Context, in *CreateInfoRequest, opts ...grpc.CallOption) (*CreateInfoReply, error)
	UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UpdateInfoReply, error)
	DeleteInfo(ctx context.Context, in *DeleteInfoRequest, opts ...grpc.CallOption) (*DeleteInfoReply, error)
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoReply, error)
	ListInfo(ctx context.Context, in *ListInfoRequest, opts ...grpc.CallOption) (*ListInfoReply, error)
}

type infoClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoClient(cc grpc.ClientConnInterface) InfoClient {
	return &infoClient{cc}
}

func (c *infoClient) CreateInfo(ctx context.Context, in *CreateInfoRequest, opts ...grpc.CallOption) (*CreateInfoReply, error) {
	out := new(CreateInfoReply)
	err := c.cc.Invoke(ctx, "/api.info.v1.Info/CreateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) UpdateInfo(ctx context.Context, in *UpdateInfoRequest, opts ...grpc.CallOption) (*UpdateInfoReply, error) {
	out := new(UpdateInfoReply)
	err := c.cc.Invoke(ctx, "/api.info.v1.Info/UpdateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) DeleteInfo(ctx context.Context, in *DeleteInfoRequest, opts ...grpc.CallOption) (*DeleteInfoReply, error) {
	out := new(DeleteInfoReply)
	err := c.cc.Invoke(ctx, "/api.info.v1.Info/DeleteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoReply, error) {
	out := new(GetInfoReply)
	err := c.cc.Invoke(ctx, "/api.info.v1.Info/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoClient) ListInfo(ctx context.Context, in *ListInfoRequest, opts ...grpc.CallOption) (*ListInfoReply, error) {
	out := new(ListInfoReply)
	err := c.cc.Invoke(ctx, "/api.info.v1.Info/ListInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoServer is the server API for Info service.
// All implementations must embed UnimplementedInfoServer
// for forward compatibility
type InfoServer interface {
	CreateInfo(context.Context, *CreateInfoRequest) (*CreateInfoReply, error)
	UpdateInfo(context.Context, *UpdateInfoRequest) (*UpdateInfoReply, error)
	DeleteInfo(context.Context, *DeleteInfoRequest) (*DeleteInfoReply, error)
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoReply, error)
	ListInfo(context.Context, *ListInfoRequest) (*ListInfoReply, error)
	mustEmbedUnimplementedInfoServer()
}

// UnimplementedInfoServer must be embedded to have forward compatible implementations.
type UnimplementedInfoServer struct {
}

func (UnimplementedInfoServer) CreateInfo(context.Context, *CreateInfoRequest) (*CreateInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInfo not implemented")
}
func (UnimplementedInfoServer) UpdateInfo(context.Context, *UpdateInfoRequest) (*UpdateInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfo not implemented")
}
func (UnimplementedInfoServer) DeleteInfo(context.Context, *DeleteInfoRequest) (*DeleteInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInfo not implemented")
}
func (UnimplementedInfoServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedInfoServer) ListInfo(context.Context, *ListInfoRequest) (*ListInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInfo not implemented")
}
func (UnimplementedInfoServer) mustEmbedUnimplementedInfoServer() {}

// UnsafeInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InfoServer will
// result in compilation errors.
type UnsafeInfoServer interface {
	mustEmbedUnimplementedInfoServer()
}

func RegisterInfoServer(s grpc.ServiceRegistrar, srv InfoServer) {
	s.RegisterService(&Info_ServiceDesc, srv)
}

func _Info_CreateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).CreateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.info.v1.Info/CreateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).CreateInfo(ctx, req.(*CreateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.info.v1.Info/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).UpdateInfo(ctx, req.(*UpdateInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_DeleteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).DeleteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.info.v1.Info/DeleteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).DeleteInfo(ctx, req.(*DeleteInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.info.v1.Info/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Info_ListInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoServer).ListInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.info.v1.Info/ListInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoServer).ListInfo(ctx, req.(*ListInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Info_ServiceDesc is the grpc.ServiceDesc for Info service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Info_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.info.v1.Info",
	HandlerType: (*InfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInfo",
			Handler:    _Info_CreateInfo_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _Info_UpdateInfo_Handler,
		},
		{
			MethodName: "DeleteInfo",
			Handler:    _Info_DeleteInfo_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _Info_GetInfo_Handler,
		},
		{
			MethodName: "ListInfo",
			Handler:    _Info_ListInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info.proto",
}
